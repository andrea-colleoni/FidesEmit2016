<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- <context:component-scan base-package="com.gianluca.CDPlayer" /> -->

	<!-- Bean compactDisc -->
	<bean id="compactDisc" class="com.gianluca.CDPlayer.SgtPeppers" />
       
	<!-- Bean cdPlayer -->
	<bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer">
	    <property name="compactDisc" ref="compactDisc" />
	</bean>
		 
        <!-- Bean cdPlayer
	<bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer" >
		<constructor-arg ref="compactDisc" />
	 </bean> -->

	<!-- Serve per caricare il namespace c di Spring -->
	<!-- xmlns:c="http://www.springframework.org/schema/c" -->
        <!-- Una volta caricato il bean viene definito in questo modo

	     <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer"
		 c:cd-ref="compactDisc" />
	
             Si puo' anche fare riferimento a un parametro di un costruttore
	     specificando il suo indice nella lista dei parametri del costruttore stesso.

	     <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer"
		 c:_0-ref="compactDisc" />

             Come ultima possibilit� utilizzando il namespace c:, un parametro di un costruttore
	     che ha un solo argomento pu� essere specificato solamente
	     con un solo underscore dato che lista degli argomenti non esiste,
	     essendo presente appunto un solo argomento.

	     <bean id="cdPlayer"
	           class="com.gianluca.CDPlayer.CDPlayer"
		   c:_-ref="compactDisc" />

	-->


	<!-- Esiste anche la possibilit� di specificare i valori
	     degli argomenti di un costruttore di un bean
	     attraverso dei valori letterali anzich� l'utilizzo
	     di un riferimento a un altro bean 
	     
	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc">
		 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
	     </bean>

             
	     Di seguito il codice tradotto usando il namespace c: con valori letterali
	     e specificando gli argomenti direttamente col nome del parametro del costruttore corrispondente

	     <bean id="compactDisc" 
	           class="com.gianluca.CDPlayer.BlankDisc"
		   c:_title="Sgt. Pepper's Lonely Hearts Club Band"
		   c:_artist="The Beatles" />

             
	     Infine usando l'indice dell'argomento nella lista dei parametri del costruttore

             <bean id="compactDisc" 
	           class="com.gianluca.CDPlayer.BlankDisc"
		   c:_0="Sgt. Pepper's Lonely Hearts Club Band"
		   c:_1="The Beatles" />

             NOTA: XML non permette che pi� di un attributo di un dato elemento
	           abbiano lo stesso nome, quindi non � possibile specificare
		   ogni singolo argomento con un solo underscore quando un costruttore
		   ha pi� di un parametro, ma � possibile quando � presente
		   solo un parametro.

             
	     WIRING COLLECTIONS

	     La cosa pi� semplice da fare se si deve specificare una lista come argomento
	     di un costruttore, � quella di passare l'elemento <null/>

	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc" >
                 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
		 <constructor-arg><null/></constructor-arg>
	     </bean>

	     <null/> inserir� il valore Java null all'interno dell'argomento del costruttore
	     e bypasser� l'iniezione della dipendenza, ma una volta che si prova a chiamare
	     il metodo play() verr� sollevata un'eccezione NullPointerException, quindi non � proprio
	     il metodo ideale quello di inserire <null/>

	     Una soluzione migliore sarebbe quella di fornire una lista di nomi di track.
	     Ci sono due opzioni.
	     
	     La prima � specificare la lista con l'elemento <list>:

	      
	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc" >
                 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
		 <constructor-arg>
		     <list>
                         <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			 <value>With a Little Help from My Friends</value>
			 <value>Lucy in the Sky with Diamonds</value>
			 <value>Getting Better</value>
			 <value>Fixing a Hole</value>
		     </list>
		 </constructor-arg>
	     </bean>

	     L'elemento <list> � figlio di <constructor-arg> e indica una lista di valori da passare al costruttore
	     L'elemento <value> specifica il valore degli elementi della lista

	     Similmente, una lista di riferimenti a bean pu� essere costruita con l'elemento <ref> al posto di <value>
             
	     Per esempio, supponiamo di avere una classe Discography con il seguente costruttore:

	         public Discography(String artist, List<CompactDisc> cds) { ... }

	     Puoi quindi configurare un bean Discography in questo modo:

	         <bean id="beatlesDiscography" class="com.gianluca.CDPlayer.Discography">
		     <constructor-arg value="The Beatles" />
		     <constructor-arg>
		         <list>
			     <ref bean="sgtPeppers" />
			     <ref bean="whiteAlbum" />
			     <ref bean="hardDaysNight" />
			     <ref bean="revolver" />
			 </list>
		     </constructor-arg>
		 </bean>

	     Nella stessa maniera, si pu� usare l'elemento <set> in un costruttore per specificare
	     un set di valori

		 <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc">
		     <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		     <constructor-arg value="The Beatles" />
		     <constructor-arg>
		         <set>
			     <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			     <value>With a Little Help from My Friends</value>
			     <value>Lucy in the Sky with Diamonds</value>
			     <value>Getting Better</value>
			     <value>Fixing a Hole</value>
			 </set>
		     </constructor-arg>
		 </bean>

             La differenza sostanziale tra usare una lista (java.util.List) o un set (java.util.Set) � che quest'ultimo,
	     se presenti dei valori duplicati, li discarder� e l'ordine non � garantito che sia preservato.

	     Infine, in ogni caso, anche una lista pu� essere iniettata in un'altra lista, set, o anche un array.

	     Questo modo di specificare le liste, set, etc. non � possibile applicarlo al namespace c:


             INIEZIONE DELLE PROPRIETA'

	     Vediamo ora come funziona l'iniezione delle propriet� di un bean tramite XML.
	     
	     Ora che la classe CDPlayer non ha nessuna dipendenza, possiamo dichiarare il bean Spring in questo modo:

	         <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer" />

             Spring non avr� nessuna difficolt� a creare il bean, ma CDPlayerTest fallir� con una NullPointerException
	     perch� la propriet� compactDisc di CDPlayer non � mai stata iniettata.

	     Ma � possibile rimediare modificando il file XML:

	         <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer">
		     <property name="compactDisc" ref="compactDisc" />
		 </bean>

	    L'elemento <property> fa per le propriet� dei metodi setter quello che l'elemento <constructor-arg> fa per i costruttori.
	    In questo caso, referenzia (con l'attributo 'ref') il bean il cui ID � 'compactDisc'
	    per essere iniettato nella propriet� compactDisc (tramite il metodo setCompactDisc())
	-->



</beans>
