<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd">

        <!-- <context:component-scan base-package="com.gianluca.CDPlayer" /> -->

	<!-- Bean compactDisc -->
	<bean id="compactDisc" class="com.gianluca.CDPlayer.SgtPeppers" />
       
	<!-- Bean cdPlayer -->
	<bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer">
	    <property name="compactDisc" ref="compactDisc" />
	</bean>
		 
        <!-- Bean cdPlayer
	<bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer" >
		<constructor-arg ref="compactDisc" />
	 </bean> -->

	<!-- Serve per caricare il namespace c di Spring -->
	<!-- xmlns:c="http://www.springframework.org/schema/c" -->
        <!-- Una volta caricato il bean viene definito in questo modo

	     <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer"
		 c:cd-ref="compactDisc" />
	
             Si puo' anche fare riferimento a un parametro di un costruttore
	     specificando il suo indice nella lista dei parametri del costruttore stesso.

	     <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer"
		 c:_0-ref="compactDisc" />

	     Utilizzando invece il namespace c:
	     un argomento di un costruttore che ha un solo parametro nella sua definizione
	     puo' essere specificato solamente con un solo underscore 
	     dato che lista dei parametri non esiste,
	     essendo presente appunto un solo parametro.

	     <bean id="cdPlayer"
	           class="com.gianluca.CDPlayer.CDPlayer"
		   c:_-ref="compactDisc" />

	-->


	<!-- Vi e' anche la possibilita' di specificare i valori
	     degli argomenti di un costruttore di un bean
	     attraverso dei valori letterali anziche' l'utilizzo
	     di un riferimento a un altro bean 
	     
	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc">
		 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
	     </bean>

             
	     Di seguito il codice tradotto usando il namespace c: con valori letterali
	     e specificando gli argomenti direttamente col nome del parametro del costruttore corrispondente

	     <bean id="compactDisc" 
	           class="com.gianluca.CDPlayer.BlankDisc"
		   c:_title="Sgt. Pepper's Lonely Hearts Club Band"
		   c:_artist="The Beatles" />

             
	     Infine usando l'indice dell'argomento nella lista dei parametri del costruttore

             <bean id="compactDisc" 
	           class="com.gianluca.CDPlayer.BlankDisc"
		   c:_0="Sgt. Pepper's Lonely Hearts Club Band"
		   c:_1="The Beatles" />

             NOTA: XML non permette che piu' di un attributo di un dato elemento
	           abbiano lo stesso nome, quindi non e' possibile specificare
		   ogni singolo argomento con un solo underscore quando un costruttore
		   ha piu' di un parametro, ma e' possibile quando e' presente
		   solo un parametro.

             
	     WIRING COLLECTIONS

	     La cosa piu' semplice da fare se si deve specificare una lista come argomento
	     di un costruttore, e' quella di passare l'elemento <null/>

	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc" >
                 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
		 <constructor-arg><null/></constructor-arg>
	     </bean>

	     <null/> inserira' il valore Java null all'interno dell'argomento del costruttore
	     e bypassera' la richiesta dell'iniezione della dipendenza, ma una volta che si prova a chiamare
	     il metodo play() verra' sollevata un'eccezione NullPointerException, quindi non e' proprio
	     la cosa ideale quello di inserire <null/>

	     Una soluzione migliore sarebbe quella di fornire una lista di nomi di track.
	     Ci sono due opzioni.
	     
	     La prima e' specificare la lista con l'elemento <list>:
	      
	     <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc" >
                 <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		 <constructor-arg value="The Beatles" />
		 <constructor-arg>
		     <list>
                         <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			 <value>With a Little Help from My Friends</value>
			 <value>Lucy in the Sky with Diamonds</value>
			 <value>Getting Better</value>
			 <value>Fixing a Hole</value>
		     </list>
		 </constructor-arg>
	     </bean>

	     L'elemento <list> e' figlio di <constructor-arg> e indica una lista di valori da passare al costruttore
	     L'elemento <value> specifica il valore degli elementi della lista

	     Similmente, una lista di riferimenti a bean puo' essere costruita con l'elemento <ref> al posto di <value>
             
	     Per esempio, supponiamo di avere una classe Discography con il seguente costruttore:

	         public Discography(String artist, List<CompactDisc> cds) { ... }

	     Puoi quindi configurare un bean Discography in questo modo:

	         <bean id="beatlesDiscography" class="com.gianluca.CDPlayer.Discography">
		     <constructor-arg value="The Beatles" />
		     <constructor-arg>
		         <list>
			     <ref bean="sgtPeppers" />
			     <ref bean="whiteAlbum" />
			     <ref bean="hardDaysNight" />
			     <ref bean="revolver" />
			 </list>
		     </constructor-arg>
		 </bean>

	     Nella stessa maniera, si puo' usare l'elemento <set> in un costruttore per specificare
	     un set di valori

		 <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc">
		     <constructor-arg value="Sgt. Pepper's Lonely Hearts Club Band" />
		     <constructor-arg value="The Beatles" />
		     <constructor-arg>
		         <set>
			     <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			     <value>With a Little Help from My Friends</value>
			     <value>Lucy in the Sky with Diamonds</value>
			     <value>Getting Better</value>
			     <value>Fixing a Hole</value>
			 </set>
		     </constructor-arg>
		 </bean>

             La differenza sostanziale tra usare una lista (java.util.List) o un set (java.util.Set) e' che quest'ultimo,
	     se presenti dei valori duplicati, li discardera' e l'ordine non e' garantito che sia preservato.

	     Infine, in ogni caso, anche una lista puo' essere iniettata in un'altra lista, set, o anche un array.

	     Questo modo di specificare le liste, set, etc. non e' possibile applicarlo al namespace c:


             INIEZIONE DELLE PROPRIETA'

	     Vediamo ora come funziona l'iniezione delle proprieta' di un bean tramite XML.
	     
	     Ora che la classe CDPlayer non ha nessuna dipendenza, possiamo dichiarare il bean Spring in questo modo:

	         <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer" />

             Spring non avra' nessuna difficolta' a creare il bean, ma CDPlayerTest fallira' con una NullPointerException
	     perche' la proprieta' compactDisc di CDPlayer non e' mai stata iniettata.

	     E' possibile pero' rimediare modificando il file XML:

	         <bean id="cdPlayer" class="com.gianluca.CDPlayer.CDPlayer">
		     <property name="compactDisc" ref="compactDisc" />
		 </bean>

	     L'elemento <property> fa per le proprieta' dei metodi setter quello che l'elemento <constructor-arg> fa per i costruttori e i suoi argomenti.
	     In questo caso, referenzia (con l'attributo 'ref') il bean il cui ID e' 'compactDisc'
	     per essere iniettato nella proprieta' compactDisc (tramite il metodo setCompactDisc()) di CDPlayer.

             
             Esattamente come con <constructor-arg> e il namespace c: esiste anche un'alternativa all'elemento <property> ovvero il namespace p

             La sintassi e' la seguente:

	         <bean id="cdPlayer" 
		       class="com.gianluca.CDPlayer.CDPlayer"
		       p:compactDisc-ref="compactDisc" />

             Si specifica il namespace p seguito da due punti e dal nome della proprieta' del bean
	     e poi da -ref che indica che si sta iniettando un riferimento a un altro bean.
	     Il valore dopo l'uguale racchiuso tra doppi apici ï¿½ l'ID del bean a cui si fa riferimento.

             
	     INIEZIONE DELLE PROPRIETA' CON VALORI LETTERALI

	     Le proprieta' possono essere iniettate con valori letterali nello stesso modo fatto con gli argomenti dei costruttori.
             Come esempio, riprendiamo il bean BlankDisc:

	         package com.gianluca.CDPlayer;

		 import java.util.List;

		 public class BlankDisc implements CompactDisc {

		     private String title;
		     private String artist;
		     private List<String> tracks;

		     public void setTitle(String title) {
		         this.title = title;
	             }

		     public void setArtist(String artist) {
		         this.artist = artist;
		     }

		     public void setTracks(List<String> tracks) {
		         this.tracks = tracks;
		     }

		     public void play() {
		         System.out.print(String.format("Playing %s by %s\n", title, artist));
			 for (String track : tracks)
			     System.out.print(String.format("-Track: %s\n", track));
		     }
		 }

	     Ora non dovresti piu' essere obbligato a iniettare queste proprieta'.
	     Potresti creare un bean come segue:

	         <bean id="reallyBlankDisc"
		       class="com.gianluca.CDPlayer.BlankDisc" />

	     Naturalmente, settare il bean senza aver settato le sue proprieta' non ha molto senso a runtime.
             Infatti il metodo play() mostrerebbe che "Playing null by null" per poi sollevare l'eccezione NullPointerException
	     quando deve elencare la lista di tracks.

	     Percio' dovresti settare queste proprieta' usando l'attributo 'value' delle'elemento <property>

	         <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc">
		     <property name="title" value="Sgt. Pepper's Lonely Hearts Club Band" />
		     <property name="artist" value="The Beatles" />
		     <property name="tracks">
			 <list>
			     <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			     <value>With a Little Help from My Friends</value>
			     <value>Lucy in the Sky with Diamonds</value>
			     <value>Getting Better</value>
			     <value>Fixing a Hole</value>
			 </list>
		     </property>
		 </bean>

             
	     Notare come la lista e' specificata nella proprieta' nella stessa maniera per l'argomento del costruttore.

	     Facoltativamente, puoi compiere la stessa cosa con il namespace p
             
                 <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc"
		      p:title="Sgt. Pepper's Lonely Hearts Club Band"
		      p:artist="The Beatles">
		      <property name="tracks">
			 <list>
			     <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			     <value>With a Little Help from My Friends</value>
			     <value>Lucy in the Sky with Diamonds</value>
			     <value>Getting Better</value>
			     <value>Fixing a Hole</value>
			 </list>
		     </property>
		 </bean>


	     Sfortunatamente, non vi e' modo per specificare una collection (come una lista e un set) tramite il namespace p
	     direttamente all'interno della definizione del bean.

	     Ci viene pero' in aiuto il namespace util di Spring.

	     Per prima cosa, bisogna dichiarare il namespace util nello schema XML, come segue:

	         xmlns:util="http://www.springframework.org/schema/util"
		 xsi:schemaLocation="http://www.springframework.org/schema/util
		                     http://www.springframework.org/schema/util/spring-util.xsd"

	     
	     per poi venirci in aiuto l'elemento <util:list> del namespace util, che crea una lista di bean.
	     Usando <util:list> e' possibile definire una lista a se stante con un proprio ID e specificarla successivamente
	     all'interno del bean che fa uso della lista:

	         <util:list id="trackList">
		     <value>Sgt. Pepper's Lonely Hearts Club Band</value>
		     <value>With a Little Help from My Friends</value>
		     <value>Lucy in the Sky with Diamonds</value>
		     <value>Getting Better</value>
		     <value>Fixing a Hole</value>
		 </util:list>

	     Ora puoi settare la lista all'interno della proprieta' tracks del bean BlankDisc:

	         <bean id="compactDisc" class="com.gianluca.CDPlayer.BlankDisc"
		      p:title="Sgt. Pepper's Lonely Hearts Club Band"
		      p:artist="The Beatles"
		      p:tracks-ref="trackList" />

	         
             Fare riferimento alla tabella presente alla pagina 59 del libro Spring in Action, 4th Edition
	     per un elenco completo di tutti gli elementi che offre il namespace util.


	     IMPORTING AND MIXING CONFIGURATIONS

	     Referencing XML configuration in JavaConfig

	     Supponiamo che due bean in un file di configurazione siano troppo difficili da gestire.
	     Se si volessero separare i due bean dallo stesso file di configurazione,
	     si potrebbe creare un file di configurazione per ogni bean, quindi, riprendendo l'esempio del CDPlayer
	     possiamo creare una classe JavaConfig per BlankDisc e chiamarla CDConfig, come segue:

	         package com.gianluca.CDPlayer;

		 import org.springframework.context.annotation.Bean;
		 import org.springframework.context.annotation.Configuration;

		 @Configuration
		 public class CDConfig {
		     
		     @Bean
		     public CompactDisc compactDisc() {
		         return new SgtPeppers();
		     }
		 }


	     In questo modo, il metodo compactDisc() e' stato rimosso da CDPlayerConfig e un modo per aggiungerlo
	     e' quello di importare CDConfig in CDPlayerConfig usando l'annotazione @Import:

	         package com.gianluca.CDPlayer;

		 import org.springframework.context.annotation.Bean;
		 import org.springframework.context.annotation.Configuration;
		 import org.springframework.context.annotation.Import;

		 @Configuration
		 @Import(CDConfig.class)
		 public class CDPlayerConfig {

		     @Bean
		     public CDPlayer cdPlayer(CompactDisc compactDisc) {
		         return new CDPlayer(compactDisc);
		     }
		 }

             O ancora meglio, puoi creare una JavaConfig a piu' alto livello e importare CDPlayerConfig e CDConfig.

	         package com.gianluca.CDPlayer;
 
		 import org.springframework.context.annotation.Configuration;
		 import org.springframework.context.annotation.Import;

		 @Configuration
		 @Import({CDPlayerConfig.class, CDConfig.class})
		 public class MainConfig {}

	     
	     Ora supponiamo invece che vorresti configurare BlankDisc in un file XML come segue:

	         <bean id="compactDisc"
		       class="com.gianluca.CDPlayer.BlankDisc"
		       c:_0="Sgt. Pepper's Lonely Hearts Club Band"
		       c:_1="The Beatles">
		     <constructor-arg>
		         <list>
                             <value>Sgt. Pepper's Lonely Hearts Club Band</value>
			     <value>With a Little Help from My Friends</value>
			     <value>Lucy in the Sky with Diamonds</value>
			     <value>Getting Better</value>
			     <value>Fixing a Hole</value>
			 </list>
		     </consutrctor-arg>
		 </bean>

             
	     Se il seguente bean risiede nel file cd-config.xml, lo si puo' importare usando @ImportResource, come segue:

	         package com.gianluca.CDPlayer;
 
		 import org.springframework.context.annotation.Configuration;
		 import org.springframework.context.annotation.Import;
		 import org.springframework.context.annotation.ImportResource;

                 @Configuration
		 @Import(CDPlayerConfig.class)
		 @ImportResource("cd-config.xml")
		 public class MainConfig {}

	     In questo modo, sia CDPlayer (JavaConfig) che BlankDisc(XML), verranno caricate nel container Spring.
	     Il metodo @Bean di CDPlayer accetta CompactDisc come parametro, e BlankDisc vi verra' iniettato, 
	     anche se configurato tramite XML.


	     Referencing JavaConfig in XML configuration

             In XML, si puo' usare l'elemento <import> per importare differenti file XML in un unico file XML:

	         <import resource="cd-config.xml" />

		 <bean id="cdPlayer"
		       class="com.gianluca.CDPlayer"
		       c:cd-ref="compactDisc" />
	     

	     Se si vuole invece configurare BlankDisc in JavaConfig e importarlo all'interno del file XML,
	     e' necessario dichiararlo come bean, in questo modo:

	         <bean class="com.gianluca.CDPlayer.CDConfig" />

		 <bean id="cdPlayer"
		       class="com.gianluca.CDPlayer.CDPlayer"
		       c:cd-ref="compactDisc" />


             ADVANCED WIRING
	     Environments and profiles
	     Configuring profile beans

	     In Spring, un profilo contiene piu' definizioni di bean 
	     che verranno utilizzati in base al profilo attivato dall'environment a runtime.

	     In JavaConfig, l'annotazione @Profile e' usata per specificare a quale profilo un bean appartiene.

	     Per esempio:

		package com.gianluca.edbs;

		import javax.activation.DataSource;

		import org.springframework.context.annotation.Bean;
		import org.springframework.context.annotation.Configuration;
		import org.springframework.context.annotation.Profile;
		
		import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
		import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;


		@Configuration
		@Profile("dev")
		public class DevelopmentProfileConfig {
                
		    @Bean(destroyMethod="shutdown")
		    public DataSource dataSource() {
		        
			return new EmbeddedDatabaseBuilder()
			    .setType(EmbeddedDatabaseType.H2)
			    .addScript("classpath:schema.sql")
			    .addScript("classpath:test-data.sql")
			    .build();
		    }
		}


	     L'annotazione @Profile indica a Spring che i bean in questa JavaConfig dovranno essere creati
	     solamente se il profile dev e' attivo, altrimenti il metodo indicato da @Bean sara' ignorato.

             Nello stesso momento, potresti avere un'altra JavaConfig per la produzione che assomiglia a questa classe:

		 package com.gianluca.edbs;

		 import javax.activation.DataSource;

	         import org.springframework.context.annotation.Bean;
       	         import org.springframework.context.annotation.Configuration;
		 import org.springframework.context.annotation.Profile;

		 import org.springframework.jndi.JndiObjectFactoryBean;


		 @Configuration
		 @Profile("prod")
		 public class ProductionProfileConfig {

		     @Bean
		     public DataSource dataSource() {
                        
		         JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();

			 jndiObjectFactoryBean.setJndiName("jdbc/myDS");
			 jndiObjectFactoryBean.setResourceRef(true);
			 jndiObjectFacotryBean.setProxyInterface(javax.sql.DataSource.class);

			 return (DataSource) jndiObjectFactoryBean.getObject();
		     }
                 }

                  
             In questo caso, il bean non sara' creato a meno che il profilo prod sara' attivo.

             A partire da Spring 3.2 e' possibile inoltre usare @Profile con i metodi insieme all'annotazione @Bean.
		 
             In questo modo sara' possibile definire i bean in un'unica classe JavaConfig e ogni bean con @Profile sara' creato
	     solamente se il corrispondente profilo specificato in @Profile sara' attivato.

	     Un esempio è il seguente:

	         package com.gianluca.edbs;

		 import javax.activation.DataSource;

		 import org.springframework.context.annotation.Bean;
		 import org.springframework.context.annotation.Configuration;
		 import org.springframework.context.annotation.Profile;

		 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
		 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;

		 import org.springframework.jndi.JndiObjectFactoryBean;


		 @Configuration
		 public class DataSourceConfig {
		    
		     @Bean(destroyMethod="shutdown")
		     @Profile("dev")
		     public DataSource embeddedDataSource() {

		         return new EmbeddedDatabaseBuilder()
			           .setType(EmbeddedDatabaseType.H2)
				   .addScript("classpath:schema.sql")
				   .addScript("classpath:test-data.sql")
				   .build();
		     }


		     @Bean
		     @Profile("prod")
		     public DataSource jdniDataSource() {

		         JndiObjectFactoryBean jndiObjectFactoryBean = new JndiObjectFactoryBean();
			 
			 jndiObjectFactoryBean.setJndiName("jdbc/myDS");   
			 jndiObjectFactoryBean.setResourceRef(true);
			 jndiObjectFactoryBean.setProxyInterface(javax.sql.DataSource.class);

			 return (DataSource) jndiObjectFactoryBean.getObject();
		     }
		 }

             Bisogna pero' ricordarsi che tutti i bean che non appartengono a un profilo, verranno comunque creati,
             indipendentemente dal profilo attualmente attivo.


             Configurazione dei profili in XML
	     *********************************

	     Per configurare profili e relativi bean in XML si usa l'attributo profile dell'elemento <beans>

	         <?xml version="1.0" encoding="UTF-8"?>
		 <beans xmlns="htttp://www.springframework.org/schema/beans"
		        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:jdbc="http://www.springframework.org/schema/jdbc"
			xsi:schemaLocation="http://www.springframework.org/schema/jdbc
					    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
					    http://www.springframework.org/schema/beans
					    http://www.springframework.org/schema/beans/spring-beans.xsd"
		        profile="dev">

                     <jdbc:embedded-database id="dataSource">
		         <jdbc:script location="classpath:schema.sql" />
			 <jdbc:script location="classpath:test-data.sql" />
		     </jdbc:embedded-database>

	         </beans>

             
	     Allo stesso modo, puoi creare un altro file di configurazione per i bean dei profili 'prod' e 'qa'.

	     Tutti i file di configurazione XML sono contenuti nell'unita' di sviluppo,
	     ma solo l'unico file di configurazione il cui attributo 'profile' corrisponde al profilo attualmente attivo, verra' usato.

	     Piuttosto che creare moltitudini di file XML per ogni environment,
	     e' possibile creare un elemento <beans> che fa da contenitore per altri <beans>, come segue:

	         <?xml version="1.0" encoding="UTF-8"?>
		 <beans xmlns="http://www.springframework.org/schema/beans"
		        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xmlns:jdbc="http://www.springframework.org/schema/jdbc"
			xmlns:jee="http://www.springframework.org/schema/jee"
			xmlns:p="http://www.springframework.org/schema/p"
			xsi:schemaLocation="http://www.sprinframework.org/schema/jee
			                    http://www.springframework.org/jee/spring-jee.xsd
					    http://www.springframework.org/jdbc
					    http://www.springframework.org/jdbc/spring-jdbc.xsd
					    http://www.springframework.org/schema/beans
					    http://www.springframework.org/schema/spring-beans.xsd">

		     <beans profile="dev">
                         <jdbc:embedded-database id="dataSource">
			     <jdbc:script location="classpath:schema.sql" />
			     <jdbc:script location="classpath:test-data.sql" />
			 </jdbc:embedded-database>
		     </beans>

		     <beans profile="qa">
		         <bean id="dataSource"
			       class="org.apache.commons.dbcp.BasicDataSource"
			       destroy-method="close"
			       p:url="jdbc:h2:tcp://dbserver/~/test"
			       p:driverClassName="org.h2.Driver"
			       p:username="sa"
			       p:password="password"
			       p:initialSize="20"
			       p:maxActive="30" />
		     </beans>

		     <beans profile="prod">
			 <jee:jndi-lookup id="dataSource"
			                  jndi-name="jdbc/myDatabase"
					  resource-ref="true"
					  proxy-interface="javax.sql.DataSource" />
		     </beans>

		 </beans>


	     Anche in questo caso, seppure i bean sono tutti definiti in un unico file XML,
	     verranno creati solo i bean il cui profilo corrisponde a quello attualmente attivo.

             A questo punto bisogna capire pero' come attivare i profili...


	     Attivazione dei profili
	     ***********************

             Spring si affida a due proprieta' separate per determinare quali profili sono attivi:

	         spring.profiles.active e spring.profiles.default

             Se e' impostato spring.profiles.active, allora il suo valore determina quali profili sono attivi.
             Se non lo e', allora Spring guarda in spring.profiles.default.

             Infine, se nessuno dei delle due proprieta' e' impostata, allora non ci sono profili attivi,
	     e solo i bean che non sono definiti per essere contenuti in un profilo, sono creati.

	     Ci sono diversi modi per impostare queste due proprieta':

		 - Come parametro iniziale di DispatcherServlet
		 - Come parametro del contesto di una web application
		 - Come JNDI entry
		 - Come variabile d'ambiente (environment variable)
		 - Come proprieta' di sistema della JVM
		 - Usando l'annotazione @ActiveProfiles in una classe di test

	     La scelta di quale usare dipende dallo sviluppatore.

	     A titolo di esempio, si potrebbe impostare spring.profiles.default col profilo development
             usando parametri in DispatcherServlet e nel contesto della servlet (per il bene di ContextLoaderListener).

	     Il file XML risultante per una web application con impostato spring.profiles.default e' il seguente:

		     <?xml version="1.0" encoding="UTF-8"?>
		     <web-app version="2.5"
		              xmlns="http://java.sun.com/xml/ns/javaee"
			      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
			                          http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

		         <context-param>
			     <param-name>contextConfigLocation</param-name>
			     <param-value>/WEB/INF/spring/root-context.xml</param-value>
			 </context-param>

			 <context-param>
			     <param-name>spring.profiles.default</param-name>
			     <param-value>dev</param-value>
			 </context-param>

			 <listener>
			     <listener-class>
			         org.springframework.web.context.ContextLoaderListener
			     </listener-class>
			 </listener>

			 <servlet>
			     <servlet-name>appServlet</servlet-name>
			     <servlet-class>
			         org.springframework.web.servlet.DispatcherServlet
		             </servlet-class>
			     <init-param>
			         <param-name>spring.profiles.default</param-name>
				 <param-value>dev</param-value>
		             </init-param>
			     <load-on-startup>1</load-on-startup>
			 </servlet>

			 <servlet-mapping>
			     <servlet-name>appSerlvet</servlet-name>
			     <url-pattern>/</url-pattern>
			 </servlet-mapping>

		     </web-app>


	     Con spring.profiles.default impostato in questo modo, ogni sviluppatore puo' recuperare
	     il codice dell'applicazione dal controllo sorgente e avviarlo usando le opzioni di development
	     (come se fosse un embedded database) senza nessuna configurazione addizionale.

	     In seguito, quando l'applicazione e' sviluppata in un ambiente QA, production, o altro,
	     la persona responsabile per il rilascio del prodotto puo' impostare spring.profiles.active
	     usando proprieta' di sistema, variabili d'ambiente, o JNDI.

	     Quando spring.profiles.active e' impostato, non importa se lo e' anche spring.profiles.default;
	     i profili impostati in spring.profiles.active hanno la precedenza.

	     NOTA: E' possibile attivare piu' profili simultaneamente per ogni environment.


             Testing con profili
	     *******************
	     Spring offre l'annotazione @ActiveProfiles per specificare quali profili attivare durante l'esecuzione di un test.

	     L'esempio che segue mostra una classe di test che usa @ActiveProfiles per attivare il profilo dev:

	         @RunWith(SpringJUnit4ClassRunner.class)
		 @ContextConfiguration(classes={PersistenceTestConfig.class})
		 @ActiveProfiles("dev")
		 public class PersistenceTest {
		    ...
		 }

             
	     Conditional beans (Bean condizionali)
	     *************************************

	     Spring 4 ha introdotto una nuova annotazione chiamata @Conditional
	     che puo' essere applicata ai metodi annotati con @Bean.

	     Se la condizione e' vera (true), allora il bean sara' creato, altrimenti sara' ignorato.

	     Per esempio, supponiamo di avere una classe MagicBean e vuoi che Spring la instanzi solo se
	     una proprieta' dell'environment e' impostata su magic.

	     Se l'environment non ha tale proprieta', allora MagicBean sara' ignorato.

	     Di seguito il codice d'esempio:

	         @Bean
		 @Conditional(MagicExistsCondition.class)
		 public MagicBean magicBean() {
		     return new MagicBean();
		 }

	     Come si puo' notare, ad @Conditional e' stata fornita una classe che specifica la condizione, in questo caso, MagicExistsCondition.

	     A @Conditional e' affiancata una interfaccia Condition:

	         public interface Condition {
		     boolean matches(ConditionContext ctx, AnnotatedTypeMetadata metadata);
		 }

             La classe fornita a @Conditional puo' essere di ogni tipo che implementi la interfaccia Condition.

	     Basta implementare il metodo matches() che se ritorna true, allora il bean annotato con @Conditional viene creato.

	     Viceversa, se matches() ritorna false, il bean non viene creato.

	     Per questo esempio, devi creare una implementazione di Condition che dipenda la sua decisione
	     sulla presenza di una proprieta' magic dell'environment.

	     Di seguito MagickExistsCondition, un'implementazione di Condition:

	         package com.gianluca.ConditionalBeans

		 import org.springframework.context.annotation.Condition;
		 import org.springframework.context.annotation.ConditionContext;
		 import org.springframework.core.type.AnnotatedTypeMetadata;
		 import org.springframework.util.ClassUtils;

		 public class MagicExistsCondition implements Condition {

		     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {

		         Environment env = context.getEnvironment();
			 return env.containsProperty("magic");
	             }
		 }


             Il metodo matches() fa uso dei parametri ConditionContext e AnnotatedTypeMetadata per compiere la sua decisione.

	     ConditionContext e' un'interfaccia che assomiglia a questa:

	         public interface ConditionContext {
		     BeanDefinitionRegistry getRegistry();
		     ConfigurableListableBeanFactory getBeanFactory();
		     Environment getEnvironment();
		     ResourceLoader getResourceLoader();
		     ClassLoader getClassLoader();
		 }

             Con ConditionContext puoi fare le seguente cose:

	         - Verificare la definizione dei bean tramite BeanDefinitionRegistry ritornato da getRegistry().
		 - Verificare la presenza dei bean, oltre la possibilita' di accedere alle proprieta' dei bean tramite
		   ConfigurableListableBeanFactory ritornato da getBeanFactory().
		 - Verificare la presenza e i valori delle variabili d'ambiente tramite Environment ritornato da getEnvironment().
		 - Leggere e ispezionare i contenuto delle risorse caricate tramite ResourceLoader ritornato da getResourceLoader().
		 - Caricare e verificare la presenza delle classi tramite ClassLoader ritornato da getClassLoader().

             Per quanto riguarda AnnotatedTypeMetadata, offre la possibilita' di ispezionare annotazioni che potrebbero essere annotato ai metodi
	     annotati con @Bean.

	     Come ConditionContext, AnnotatedTypeMetadata e' un'interfaccia:

	         public interface AnnotatedTypeMetadata {
		     boolean isAnnotated(String annotatioType);
		     Map<String, Object> getAnnotationAttributes(String annotationType);
		     Map<String, Object> getAnnotationAttributes(String annotationType, boolean classValueAsString);
		     MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationType);
		     MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationType, boolean classValuesAsString);
		 }

	     Con il metodo isAnnotated() e' possibile verificare se il metodo con @Bean e' annotato con una particolare tipo di annotazione.

	     Gli altri metodi permettono di verificare quali attributi di ogni tipo di annotazione sono applicati al metodo con @Bean.


	      






	-->



</beans>
