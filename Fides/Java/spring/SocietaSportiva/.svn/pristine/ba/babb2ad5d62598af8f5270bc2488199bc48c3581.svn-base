package it.fides.sp.dao.namedParameter;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Component;

import it.fides.sp.dao.GestoreDAO;
import it.fides.sp.model.Gestore;

@Component
public class JdbcGestoreDAO implements GestoreDAO {
	
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	public JdbcGestoreDAO(DataSource dataSource) {
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}
	
	// Metodi CRUD
	// Crea un gestore
	@Override
	public void create(Gestore gestore) {
		final String SQL = "INSERT INTO Gestore (id_gestore, user, password) VALUES (:idGestore, :user, :password)";
		
		SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(gestore);
		
		namedParameterJdbcTemplate.update(SQL, namedParameters);
		
		System.out.println("Record creato: " + gestore);
	}

	// Cerca un gestore
	@Override
	public Gestore read(int idGestore) {
		final String SQL = "SELECT * FROM gestore WHERE id_gestore = :idGestore";
		
		SqlParameterSource namedParameters = new MapSqlParameterSource("idGestore", idGestore);
		
		return namedParameterJdbcTemplate.queryForObject(SQL, namedParameters, new GestoreRowMapper());
	}

	@Override
	public void update(Gestore gestore) {
			final String SQL = "UPDATE gestore SET user = :user, password = :password WHERE id_gestore = :idGestore";
			
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(gestore);
			
			namedParameterJdbcTemplate.update(SQL, namedParameters);
			
			System.out.print("Record aggiornato: " + gestore);
	}

	// Elimina un gestore
	@Override
	public void delete(int idGestore) {
		final String SQL = "DELETE FROM gestore WHERE id_gestore = :idGestore";
		
		SqlParameterSource namedParameters = new MapSqlParameterSource("idGestore", idGestore);
		
		namedParameterJdbcTemplate.update(SQL, namedParameters);
		
		System.out.println(String.format("Record ID=%d eliminato", idGestore));
	}

	// Ritorna tutti i gestore come lista
	@Override
	public List<Gestore> selectAll() {
		final String SQL = "SELECT * FROM gestore";
		
		List<Gestore> gestori = namedParameterJdbcTemplate.query(SQL, new GestoreRowMapper());
		
		return gestori;
	}

	// GestoreRowMapper
	private static final class GestoreRowMapper implements RowMapper<Gestore> {
		
		public Gestore mapRow(ResultSet rs, int rowNum) throws SQLException {
			Gestore gestore = new Gestore();
			gestore.setIdGestore(rs.getInt("id_gestore"));
			gestore.setUser(rs.getString("user"));
			gestore.setPassword(rs.getString("password"));
			
			return gestore;
		}
		
	}
}
